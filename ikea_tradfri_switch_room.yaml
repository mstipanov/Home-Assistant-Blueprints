# ver 1.2
---
# This automation configures IKEA TRADFRI On/Off switch to my default room setup
# connected through ZHA.

blueprint:
  source_url: https://raw.githubusercontent.com/mstipanov/Home-Assistant-Blueprints/master/ikea_tradfri_switch_room.yaml

  name: ZHA - IKEA TRADFRI - 2 Button Remote - Room

  description: >-
    This automation configures IKEA TRADFRI On/Off switch to my default room setup
    connected through ZHA.

  domain: automation

  input:
    switch_device:
      name: IKEA TRADFRI remote control
      description: Select the remote control you wish to use.
      selector:
        device:
          filter:
            - integration: zha
              manufacturer: IKEA of Sweden
              model: TRADFRI on/off switch
    light_entity:
      description: Light entity to turn on or off.
      name: Light entity
      selector:
        entity:
          domain: light
    cover_entity:
      description: Cover entity to open or close.
      name: (Optional) Cover entity
      default: {}
      selector:
        entity:
          domain: cover

mode: restart
max_exceeded: silent

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input switch_device

action:
  - choose:
      # Short-Press the on button
      - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.command == "on" }}'
        sequence:
          - service: light.turn_on
            metadata: {}
            data: {}
            target:
              entity_id: !input light_entity

      # Long-Press the on button
      - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.command == "move_with_on_off" }}'
        sequence:
          - service: pyscript.cover_open
            metadata: {}
            data:
              entity_id: !input cover_entity

      # Short-Press the off button
      - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.command == "off" }}'
        sequence:
          - service: light.turn_off
            metadata: {}
            data: {}
            target:
              entity_id: !input light_entity

      # Long-Press the off button
      - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.command == "move" }}'
        sequence:
          - service: pyscript.cover_close
            metadata: {}
            data:
              entity_id: !input cover_entity

    # Any other event will cancel the repeat loops (i.e. releasing the [on|off] button)
    default: []